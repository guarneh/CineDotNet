// <auto-generated />
using System;
using CIneDotNet.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CIneDotNet.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20230808224118_peliculas")]
    partial class peliculas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CIneDotNet.Models.Funcion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("cantClientes")
                        .HasColumnType("int");

                    b.Property<double>("costo")
                        .HasColumnType("float");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("idPelicula")
                        .HasColumnType("int");

                    b.Property<int>("idSala")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("idPelicula");

                    b.HasIndex("idSala");

                    b.ToTable("Funciones", (string)null);
                });

            modelBuilder.Entity("CIneDotNet.Models.FuncionUsuario", b =>
                {
                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<int>("idFuncion")
                        .HasColumnType("int");

                    b.Property<int>("cantEntradas")
                        .HasColumnType("int");

                    b.HasKey("idUsuario", "idFuncion");

                    b.HasIndex("idFuncion");

                    b.ToTable("funcionUsuarios");
                });

            modelBuilder.Entity("CIneDotNet.Models.Pelicula", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinopsis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Peliculas", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            Duracion = 120,
                            Nombre = "Barbie",
                            Poster = "ken.jpg",
                            Sinopsis = "Después de ser expulsada de Barbieland por no ser una muñeca de aspecto perfecto, Barbie parte hacia el mundo humano para encontrar la verdadera felicidad.\r\n"
                        },
                        new
                        {
                            id = 2,
                            Duracion = 180,
                            Nombre = "Oppenheimer",
                            Poster = "oppenhaimer.jpeg",
                            Sinopsis = "El físico J Robert Oppenheimer trabaja con un equipo de científicos durante el Proyecto Manhattan, que condujo al desarrollo de la bomba atómica.\r\n"
                        },
                        new
                        {
                            id = 3,
                            Duracion = 105,
                            Nombre = "Sound of Freedom",
                            Poster = "freedom.jpg",
                            Sinopsis = "Sonido De Libertad, basada en una increíble historia real, trae luz y esperanza al obscuro mundo del trafico de menores. Después de rescatar a un niño de los traficantes, un agente federal descubre que la hermana del niño todavía está cautiva y decide embarcarse en una peligrosa misión para salvarla. Con el tiempo en su contra, renuncia a su trabajo y se adentra en lo profundo de la selva colombiana, poniendo su vida en riesgo para liberarla y traerla de vuelta a casa.\r\n"
                        });
                });

            modelBuilder.Entity("CIneDotNet.Models.Sala", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("capacidad")
                        .HasColumnType("int");

                    b.Property<string>("ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Salas", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            capacidad = 50,
                            ubicacion = "Sala A"
                        },
                        new
                        {
                            id = 2,
                            capacidad = 30,
                            ubicacion = "Sala B"
                        });
                });

            modelBuilder.Entity("CIneDotNet.Models.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<double>("Credito")
                        .HasColumnType("float");

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<bool>("EsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("IntentosFallidos")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Usuarios", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            Apellido = "Doe",
                            Bloqueado = false,
                            Credito = 10000.0,
                            DNI = 12345678,
                            EsAdmin = true,
                            FechaNacimiento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntentosFallidos = 0,
                            Mail = "johndoe@gmail.com",
                            Nombre = "John",
                            Password = "1234"
                        },
                        new
                        {
                            id = 2,
                            Apellido = "Doe",
                            Bloqueado = false,
                            Credito = 10000.0,
                            DNI = 98765432,
                            EsAdmin = false,
                            FechaNacimiento = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntentosFallidos = 0,
                            Mail = "janedoe@gmail.com",
                            Nombre = "Jane",
                            Password = "1234"
                        });
                });

            modelBuilder.Entity("CIneDotNet.Models.Funcion", b =>
                {
                    b.HasOne("CIneDotNet.Models.Pelicula", "miPelicula")
                        .WithMany("misFunciones")
                        .HasForeignKey("idPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CIneDotNet.Models.Sala", "miSala")
                        .WithMany("misFunciones")
                        .HasForeignKey("idSala")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("miPelicula");

                    b.Navigation("miSala");
                });

            modelBuilder.Entity("CIneDotNet.Models.FuncionUsuario", b =>
                {
                    b.HasOne("CIneDotNet.Models.Funcion", "funcion")
                        .WithMany("funcionUsuarios")
                        .HasForeignKey("idFuncion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CIneDotNet.Models.Usuario", "usuario")
                        .WithMany("Tickets")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("funcion");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("CIneDotNet.Models.Funcion", b =>
                {
                    b.Navigation("funcionUsuarios");
                });

            modelBuilder.Entity("CIneDotNet.Models.Pelicula", b =>
                {
                    b.Navigation("misFunciones");
                });

            modelBuilder.Entity("CIneDotNet.Models.Sala", b =>
                {
                    b.Navigation("misFunciones");
                });

            modelBuilder.Entity("CIneDotNet.Models.Usuario", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
